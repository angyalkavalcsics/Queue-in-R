solverouting <- function(R){
n = nrow(R)
if(n != ncol(R)){stop('R must be a square matrix')}
I = diag(x = 1, nrow = n, ncol = n)
Q = cbind((R - I), rep(1, n))
b = matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1))
Q_t = t(Q)
v = (b%*%Q_t)%*%solve(Q%*%Q_t)
}
R = matrix(c(0, 0.75, 0.25,0.6666666667, 0, 0.3333333333,
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
R
'
test <- matrix(c(0, 0.75, 0.25,
0.6666666667, 0, 0.3333333333,
1, 0, 0,
0, 1, 0), nrow = 4, ncol = 3, byrow = TRUE)
'
test <- matrix(c(0, 0.75, 0.25,
0.6666666667, 0, 0.3333333333,
1, 0, 0,
0, 1, 0), nrow = 4, ncol = 3, byrow = TRUE)
test
solverouting(test)
solverouting <- function(R){
n <- nrow(R)
if(n != ncol(R)){stop('The routing matrix must be square')}
I <- diag(x = 1, nrow = n, ncol = n)
Q <- cbind((R - I), rep(1, n))
b <- matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1))
Q_t <- t(Q)
v <- (b%*%Q_t)%*%solve(Q%*%Q_t)
return(v)
}
R = matrix(c(0, 0.75, 0.25,0.6666666667, 0, 0.3333333333,
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
test <- matrix(c(0, 0.75, 0.25,
0.6666666667, 0, 0.3333333333,
1, 0, 0,
0, 1, 0), nrow = 4, ncol = 3, byrow = TRUE)
solverouting(R)
solverouting(test)
sum(  R < 0  )
R = matrix(c(0, -0.75, 0.25,0.6666666667, 0, 0.3333333333,
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
sum(  R < 0  )
sum(R)
R = matrix(c(0, 1.75, 0.25,0.6666666667, 0, 0.3333333333,
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
sum(R > 1)
0.4444444 + 0.3333333 + 0.2222222
2/3
solverouting <- function(R){
n <- nrow(R)
if(n != ncol(R)){stop('The routing matrix must be square')}
if(sum(R < 0) > 0){stop('Cannot have negative probabilities in the routing matrix')}
if(sum(R > 1) > 0){stop('Cannot have probabilities greater than one in the routing matrix')}
if("Rmpfr" %in% rownames(installed.packages()) == FALSE) {install.packages("Rmpfr")}
suppressWarnings(suppressMessages(library(Rmpfr)))
R <- mpfr(R, 300)
I <- mpfr(diag(x = 1, nrow = n, ncol = n), 300)
Q <- cbind((R - I), rep(1, n))
b <- mpfr(matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1)), 300)
Q_t <- t(Q)
v <- (b%*%Q_t)%*%solve(Q%*%Q_t)
return(v)
}
R = matrix(c(0, 0.75, 0.25,
(2/3) , 0, (1/3)),
1, 0, 0),
nrow = 3, ncol = 3, byrow = TRUE)
R = matrix(c(0, 0.75, 0.25,
(2/3) , 0, (1/3)),
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
R = matrix(c(0, 0.75, 0.25,
(2/3) , 0, (1/3),
1, 0, 0), nrow = 3, ncol = 3, byrow = TRUE)
solverouting <- function(R){
n <- nrow(R)
if(n != ncol(R)){stop('The routing matrix must be square')}
if(sum(R < 0) > 0){stop('Cannot have negative probabilities in the routing matrix')}
if(sum(R > 1) > 0){stop('Cannot have probabilities greater than one in the routing matrix')}
if("Rmpfr" %in% rownames(installed.packages()) == FALSE) {install.packages("Rmpfr")}
suppressWarnings(suppressMessages(library(Rmpfr)))
R <- mpfr(R, 300)
I <- mpfr(diag(x = 1, nrow = n, ncol = n), 300)
Q <- cbind((R - I), rep(1, n))
b <- mpfr(matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1)), 300)
Q_t <- t(Q)
v <- (b%*%Q_t)%*%solve(Q%*%Q_t)
return(v)
}
solverouting(R)
solverouting <- function(R){
n <- nrow(R)
if(n != ncol(R)){stop('The routing matrix must be square')}
if(sum(R < 0) > 0){stop('Cannot have negative probabilities in the routing matrix')}
if(sum(R > 1) > 0){stop('Cannot have probabilities greater than one in the routing matrix')}
if("Rmpfr" %in% rownames(installed.packages()) == FALSE) {install.packages("Rmpfr")}
suppressWarnings(suppressMessages(library(Rmpfr)))
I <- diag(x = 1, nrow = n, ncol = n)
Q <- cbind((R - I), rep(1, n))
b <- matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1))
Q_t <- t(Q)
v <- (b%*%Q_t)%*%solve(Q%*%Q_t)
return(as.numeric(mpfr(v, 100)))
}
solverouting(R)
v = solverouting(R)
sum(v)
n <- nrow(R)
I <- diag(x = 1, nrow = n, ncol = n)
Q <- cbind((R - I), rep(1, n))
b <- matrix(c(rep(0, n), 1), nrow = 1, ncol = (n+1))
Q_t <- t(Q)
sum((b%*%Q_t)%*%solve(Q%*%Q_t))
